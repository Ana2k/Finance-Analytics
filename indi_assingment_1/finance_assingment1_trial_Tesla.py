# -*- coding: utf-8 -*-
"""Finance_assingment1_trial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n4dDLFFz2CsoXhQJdz54B7KZ1LZsQ0lC
"""

# https://www.geeksforgeeks.org/ways-to-import-csv-files-in-google-colab/ - to import csv file
# blog as reference - https://towardsdatascience.com/time-series-forecasting-predicting-stock-prices-using-an-arima-model-2e3b3080bd70

from google.colab import files
uploaded = files.upload()

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
import io
from pandas.plotting import lag_plot
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error

df = pd.read_csv(io.BytesIO(uploaded['TSLA.csv']))
# print(df)
# df.head(100)

#code to check auto correlation
plt.figure()
lag_plot(df['Open'], lag=3)
plt.title('TESLA Stock - Autocorrelation plot with lag = 3')
plt.show()
#(There is auto-correlation in the data).
#We can now confirm that ARIMA is going to be a good model to be applied to this type of data

#blog for xticks = https://www.geeksforgeeks.org/matplotlib-pyplot-xticks-in-python/
#blog for np.arrange = https://realpython.com/how-to-use-numpy-arange/
#es perfectose... figsize not above the plt.plot() was causing the issue.
plt.figure(figsize = (10,8))
plt.plot(df["Date"], df["Close"])
plt.xticks(np.arange(0,100, 15), df['Date'][0:100:15])
plt.title("TESLA stock price over time")
plt.xlabel("Time (date wise)")
plt.ylabel("Price (USD)")

plt.show()

# For this we select the following ARIMA parameters: p=4, d=1 and q=0.
# training (50 % ) and test (50%) set.
data_train, data_test = df[0:int(len(df)*0.5)], df[int(len(df)*0.5):]
training_data = data_train['Close'].values
data_test = data_test['Close'].values
history = [x for x in training_data]
model_predictions = []
N_observations_test = len(data_test)
for time_point in range(N_observations_test):
    model = ARIMA(history, order=(4,1,0))
    model_fit = model.fit(disp=0)
    output = model_fit.forecast()
    yhat = output[0]
    model_predictions.append(yhat)
    true_test_value = data_test[time_point]
    history.append(true_test_value)
MSE_error = mean_squared_error(data_test, model_predictions)
print('Testing Mean Squared Error is {}'.format(MSE_error))

#The MSE of the test set is quite large 
# denoting that the precise prediction is a hard problem. 
# However, this is the average squared value across all the test set predictions. 
# Letâ€™s visualize the predictions to understand the performance of the model more.



test_set_range = df[int(len(df)*0.5):].index
plt.figure(figsize = (15,8))
plt.plot(test_set_range, model_predictions, color='blue', marker='o', linestyle='dashed',label='Predicted Price')
plt.plot(test_set_range, data_test, color='red', label='Actual Price')
plt.title('TESLA Prices Prediction')
plt.xlabel('Date')
plt.ylabel('Prices')
plt.xticks(np.arange(50,100,15), df.Date[50:100:15])
plt.legend()
plt.show()

